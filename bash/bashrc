# -*- mode: sh -*-

# In case we're running MacOS and we've installed
# (among others) GPG through Brew
export PATH="/opt/homebrew/bin:$PATH"

#ignoredups makes retrieving times for postmortems harder/impossible
export HISTCONTROL=ignorespace
export HISTSIZE=30000
# Add times for postmortem data gathering
export HISTTIMEFORMAT="%F %T "

# Needed for GPG SSH auth
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

# Start gpg-agent
if ! pgrep gpg-agent > /dev/null; then
	gpgconf --launch gpg-agent &
fi

# Needed for GPG git/etc. auth
GPG_TTY=$(tty)
export GPG_TTY

# Tell GPG which terminal pinentry should be ran on
gpg-connect-agent updatestartuptty /bye >/dev/null

# Set config file directories
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export RLWRAP_HOME="$XDG_DATA_HOME"/rlwrap
#export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
#export XINITRC="$HOME"/.xinitrc
#export XSERVERRC="$XDG_CONFIG_HOME"/X11/xserverrc
export ANDROID_PREFS_ROOT="$XDG_CONFIG_HOME"/android
export ANDROID_EMULATOR_HOME="$XDG_DATA_HOME"/android/emulator
export SQLITE_HISTORY=$XDG_DATA_HOME/sqlite_history

shopt -s histappend
shopt -s cmdhist
shopt -u huponexit
shopt -s autocd
shopt -s cdspell # Fix cd errors in interactive shell

# Advanced bash completion
if ! shopt -oq posix; then
	if [ -f /opt/homebrew/etc/bash_completion ]; then
		. /opt/homebrew/etc/bash_completion
	elif [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	elif [ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]; then
		. "/opt/homebrew/etc/profile.d/bash_completion.sh"
	fi
fi

# Auto-complete command from history
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# Add scripts to path
if [ -d "$HOME/.scripts" ] ; then
	PATH="$HOME/.scripts:$PATH"
fi
if [ -d "$HOME/bin" ] ; then
	PATH="$HOME/bin:$PATH"
fi
if [ -d "$HOME/.local/bin" ] ; then
	PATH="$HOME/.local/bin:$PATH"
fi

#Set prompt
PS1="> "
git_show_branch() {
	__gsb_BRANCH=$(git symbolic-ref -q --short HEAD 2>/dev/null)
	if [ -n "$__gsb_BRANCH" ]; then
		echo "îœ¥ $__gsb_BRANCH"
	fi
}
PS1="\$(git_show_branch)$PS1"

alias v=editor
alias vi=editor
alias vim=editor
export EDITOR=editor

# A bunch of aliases, just cause.
unamestr=$(uname)

if [ "$unamestr" != 'Darwin' ]; then
	alias open='xdg-open'
fi
alias ec='emacsclient -n -r'
alias agenda='emacsclient -n -r -e "(progn (org-agenda-list)(delete-other-windows))" > /dev/null'
alias grep='grep --color=auto'
alias zgrep='zgrep --color=auto'
alias du='du -sh' # Only show the total in human readable format
alias df='df -h' # Show in human readable format
alias mkdir='mkdir -p' # Don't be mad when I try to make multiple folders at once.
alias xclip='xclip -sel clip' # Have xclip always overwrite global clipboard
alias gpgreload='gpg-connect-agent updatestartuptty /bye > /dev/null'
alias feed='newsboat'
alias feedreload='newsboat -xreload'
alias mail='mutt'
alias mailreload='mbsync -aV'
alias emacs='env TERM=xterm-24bits emacs -nw'
alias wget='wget --hsts-file="$XDG_CACHE_HOME/wget-hsts"'

alias git='gpg-connect-agent updatestartuptty /bye >/dev/null; git'
alias ssh='gpg-connect-agent updatestartuptty /bye >/dev/null; ssh'

platform='unknown'
if [ "$unamestr" = 'Linux' ]; then
	platform='linux'
elif [ "$unamestr" = 'FreeBSD' ]; then
	platform='freebsd'
fi

if [ "$platform" = 'linux' ]; then
	alias ls='ls -Glshop --color=auto --group-directories-first'

elif [ "$platform" = 'freebsd' ]; then
	alias ls='ls -laG'

elif [ "$unamestr" = 'Darwin' ]; then
	alias ls='ls -laG'
fi

# Make Firefox run native Wayland framing, uses less resources and allows for native features
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
	export MOZ_ENABLE_WAYLAND=1
fi

function set-title() {
	if [[ -z "$ORIG" ]]; then
		ORIG=$PS1
	fi
	TITLE="\[\e]2;$*\a\]"
	PS1=${ORIG}${TITLE}
}

function map () {
	for x in "${@:2}"; do $1 $x; done
}

if [ -d "$HOME/.bashrc.d" ] ; then
	for f in ~/.bashrc.d/*; do source $f; done
fi
